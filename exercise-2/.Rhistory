# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2018 + runif(100, -5000, 10000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,
salaries_2017,
salaries_2018,
stringsAsFactors = FALSE)
View(salaries)
data("USPersonalExpenditure")
is.data.frame(USPersonalExpenditure)
uspe<-data.frame(USPersonalExpenditure)
View(uspe)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
uspe<-data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
#X1940
# Add a column "category" to your data frame that contains the rownames
uspe$catergory <- rownames(uspe)
sum(uspe$X1940)
# How much money was spent on Food and Tobacco in 1960?
uspe("Food and Tobacco", X1940)
# How much money was spent on Food and Tobacco in 1960?
uspe["Food and Tobacco", X1940]
# How much money was spent on Food and Tobacco in 1960?
uspe["Food and Tobacco", "X1940"]
# What was the highest expenditure category in 1960?
maximum(sum(uspe$X1960))
# What was the highest expenditure category in 1960?
max(sum(uspe$X1960))
# What was the highest expenditure category in 1960?
max(uspe$X1960)
lowest_catergory <- function(year){
minumum<- min(uspe$year)
lowest_spending <- (minimum$catergory)
return(lowest_spending)
}
lowest_catergory(X1960)
# returns the lowest spending category of that year
lowest_catergory <- function(year){
miniumum<- min(uspe$year)
lowest_spending <- (minimum$catergory)
return(lowest_spending)
}
lowest_catergory(X1960)
lowest_catergory <- function(year){
minimum<- min(uspe$year)
lowest_spending <- (minimum$catergory)
return(lowest_spending)
}
lowest_catergory(X1960)
lowest_catergory <- function(year){
col <- paste0("X", year)
return(uspe$catergory(min(uspe$year)))
}
lowest_catergory(1960)
lowest_catergory <- function(year){
col <- paste0("X", year)
return(uspe$catergory(min(uspe$year)))
}
lowest_catergory(1960)
lowest_catergory <- function(year){
col <- paste0("X", year)
return(uspe$catergory[min(uspe$year)])
}
lowest_catergory(1960)
lowest_catergory <- function(year){
col <- paste0("X", year)
return(uspe$catergory[min(uspe$col)])
}
lowest_catergory(1960)
lowest_catergory <- function(year){
col <- paste0("X", year)
uspe$category[uspe[, col] == min(uspe[, col])]
}
lowest <- sapply((1940, 1960, 5), lowest_category))
lowest <- sapply((1940, 1960, 5), lowest_category))
lowest <- sapply(seq(1940, 1960, 5), lowest_category))
lowest <- sapply(seq((1940, 1960, 5), lowest_category))
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
lowest_category <- function(year){
col <- paste0("X", year)
uspe$category[uspe[, col] == min(uspe[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
